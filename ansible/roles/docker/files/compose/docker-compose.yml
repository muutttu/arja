version: "3.9"

services:
  db_app:
    container_name: database-app
    build:
      context: ./database # path to a directory containing a Dockerfile
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${DEFAULT_DB}
      POSTGRES_USER: ${DEFAULT_DB_USER}
      POSTGRES_PASSWORD: ${DEFAULT_DB_PASSWORD}
    networks:
      - backend
    restart: always
    expose:
      - "5432"
    volumes:
      - "database_data:/var/lib/postgresql/data/" # TODO - check

  app:
    container_name: flask-app
    depends_on:
      - db_app
    build:
      context: ./app
      dockerfile: Dockerfile
    networks:
      - frontend
      - backend
    restart: always
    expose:
      - "5000"
    volumes:
      - "app_static_files:/var/www/static"
      - "app_media_files:/var/www/media"
    links: # Links allow you to define extra aliases by which a service is reachable from another service.
      - "db_app:database" # Link to containers in another service, here db_app and database

  nginx:
    container_name: nginx
    depends_on:
      - app
    build:
      context: ./nginx
      dockerfile: Dockerfile
    environment:
      DOMAIN: ${DEFAULT_DOMAIN}
      WWW_DOMAIN: ${DEFAULT_WWW_DOMAIN}
      CHAT_DOMAIN: ${DEFAULT_CHAT_DOMAIN}
    networks:
      - frontend
    restart: always
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS/SSL
    volumes:
      - "app_static_files:/var/www/static"
      - "app_media_files:/var/www/media"
      - "nginx_conf:/etc/nginx/templates"
      - "certbot_conf:/etc/nginx/ssl/:ro"
      - "certbot_data:/var/www/certbot/:ro"

  certbot:
    container_name: certbot
    depends_on:
      - nginx
    build:
      context: ./certbot
      dockerfile: Dockerfile
    networks:
      - frontend
    restart: "no"
    volumes:
      - "certbot_conf:/etc/letsencrypt/:rw"
      - "certbot_data:/var/www/certbot/:rw"
      - "certbot_acme:/var/lib/letsencrypt:rw"
    command: certonly --webroot -w /var/www/certbot/ --agree-tos --email ${DEFAULT_EMAIL} -d ${DEFAULT_DOMAIN} --dry-run

  ejabberd:
    container_name: ejabberd
    depends_on:
      - nginx
    build:
      context: ./ejabberd
      dockerfile: Dockerfile
    networks:
      - frontend
    restart: always
    volumes:
      - "ejabberd_data:/opt/ejabberd/ssl" # host file: $ cat fullchain.pem privkey.pem > xmpp_domain.pem
      - "ejabberd_data:/opt/ejabberd/backup"
      - "ejabberd_data:/opt/ejabberd/upload"
      - "ejabberd_data:/opt/ejabberd/database"
    ports:
      - "5222:5222" # XMPP Client
      #- "5269:5269" # XMPP Server, enable if S2S needed.
      - "5280:5280" # HTTP GUI
      - "5443:5443" # HTTPS GUI
    environment:
      DEFAULT_DOMAIN: ${DEFAULT_DOMAIN}
      XMPP_DOMAIN: ${DEFAULT_CHAT_DOMAIN}
      CIPHERS: ${EJABBERD_CIPHERS}
      EJABBERD_ADMINS: ${DEFAULT_CHAT_ADMIN}
      EJABBERD_USERS: ${DEFAULT_CHAT_USERS}

  portainer:
    container_name: portainer
    build:
      context: ./portainer # path to a directory containing a Dockerfile
      dockerfile: Dockerfile
    networks:
      - frontend
    restart: always
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Read-only access to host system Docker-socket
      - "portainer_data:/data"

# Persistent data to be configured in volumes from Docker host system /var/lib/docker/volumes
volumes: # Named volumes inside /var/lib/docker/volume local docker host directory.
  app_static_files:
  app_media_files:
  database_data:
  nginx_conf:
  certbot_data:
  certbot_conf:
  certbot_acme:
  ejabberd_data:
  portainer_data:

networks:
  frontend: # Reservation for frontend-network
    name: arja_frontend_network
  backend: # Reservation for backend-network
    name: arja_backend_network
