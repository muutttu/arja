user  nginx;
worker_processes  3;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    upstream flask {
        # server unix:///path/to/your/mysite/mysite.sock; # for a Unix file socket
        server flask-app:5000;
    }

    server {
        
        listen 80;

        root        /usr/share/nginx/html;
        index       index.html;

        server_name localhost 127.0.0.1;

        charset     utf-8;

        # max upload size
        client_max_body_size 1M;   # adjust to taste

        error_page  500 502 503 504  /50x.html;

        location / {
            index index.html;
        }
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # TODO: change, when SSL configured
        #location / {
        #    return 301 https://$host$request_uri;
        #}

        location /flask/ {
            proxy_pass          http://flask/;
            proxy_redirect      off; # Or http://flask/ https://foo.com/blog/; # This directive is used when handling redirects that are issued by backend system
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr; # shows as the proxy_ip instead of the client_ip
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
        }
        location /ejabberd/ {
            proxy_pass http://ejabberd:5280/;
            proxy_redirect      off;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr; # shows as the proxy_ip instead of the client_ip
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
        }

        location /static/ {
            alias /var/www/static/;
        }

        location /media/ {
            alias /var/www/media/;
        }

    }

#    server {
#        listen 443 ssl http2;
#        server_name localhost 127.0.0.1;

#        ssl_session_cache shared:SSL:10m;
#        ssl_session_timeout 24h;
#        ssl_session_tickets off;
#        ssl_prefer_server_ciphers on;
#        ssl_protocols TLSv1.2;
#        ssl_ciphers EECDH+CHACHA20:EECDH+AES;
#        ssl_ecdh_curve X25519:prime256v1:secp521r1:secp384r1;  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
#        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#    }

    
    server {
        # if no Host match, close the connection to prevent host spoofing
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 default_server;
        listen [::]:443 default_server;
        server_name _;
        return 444;
    }
}

